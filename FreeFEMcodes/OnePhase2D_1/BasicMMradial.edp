// Code for the paper: "Longest minimal length partitions"
// Authors: Beniamin Bogosel and Edouard Oudet
// Date: February 2021

// If you use parts of the code in your work, please give credit
// by citing our work!


// Maximize the minimal relative perimeter in 2D
// Fourier parametrization of the boundary
// Modica Mortola used for the computation



load "ff-Ipopt"
load "ffrandom"
load "lapack"
load "ff-NLopt"


verbosity = 0;

// Various parameters

real areatarget = pi; // target area for the domain D
// Constraint of for the area fraction for the minimal-relative perimeter subset 
real Prop=0.5;        
real epst = 0.05;     // Epsilon in Modica-Mortola
int niter = 150;        // number of iterations
real alpha = 0.01;     // descent step
int meshpar = 200;     //  mesh size
macro Pk P1//              Finite element type
int nruns = 5; // number of runs of the optimization algorithm for the Modica-Mortola problem

int saving=0;          // parameter for saving information during the optimization process

// function for producing a random vector of a given size
func real[int] rand(int h){
  randinit(randint32() );
  real[int] vec(h);
  for(int i = 0;i<h;i++){
     vec(i) = 2*randreal1()-1;
  }
  return vec;
}

// evaluation of a trigonometric polynomial
// inputs: t and the vector of coefficients
func real ptrig(real t, real[int] &vect){
  int n = (vect.n-1)/2;
  real[int] as = vect(1:n) ;    // coeffs of cos
  real[int] bs = vect(n+1:2*n); // coeffs of sin
  real a0 =vect(0);
  real Sum = a0;   // initialize sum
  for(int i=0;i<n;i++){Sum+=(as[i]*cos((i+1)*t)+bs[i]*sin((i+1)*t));}
  return Sum;
}

// define a mesh variable to keep in memory
mesh Th;

// Objective function: inputs - Fourier coefficients
func real[int] f(real[int] &vec){

   int i;
   real t;

   real beta = 2;      
   int m = vec.n;
   int n = (m-1)/2;
   real[int] as = vec(1:n) ;
   real[int] bs = vec(n+1:2*n);
   real a0 =vec(0);

   // Mesh generation using trigonometric polynomials
   // for evaluating the radial function
   border C(t=0,2* pi){x=cos(t)*ptrig(t,vec);
                       y=sin(t)*ptrig(t,vec);
                       label=1;}
   Th = buildmesh (C(meshpar));
   // Adapt the mesh so that the maximum size is smaller than
   //    epsilon in Modica-Mortola functional
   Th= adaptmesh(Th,iso=1,hmax=0.25*epst,nbvx=50000);
   // plot the mesh
   plot(Th); 

   // Finite element spaces
   fespace Vh(Th,Pk);
   fespace Vh0(Th,P0); 
   Vh u,v;
   int NN = Vh.ndof;

   Vh0 hh = hTriangle;
   //cout << "Mesh size: " << hh[].min << " " << hh[].max << "  nv: " << Th.nv << endl;

   // a macro for the gradient
   macro Grad(u) [dx(u),dy(u)]//

    // Compute stiffness and rigidity matrices in FreeFEM
	varf a(u,v) = int2d(Th)(Grad(u)'*Grad(v));
	varf b(u,v) = int2d(Th)(u*v);

	matrix K = a(Vh,Vh);
	matrix M = b(Vh,Vh);
	
	real[int] ones(NN);
	ones = 1; // define a vector of ones
    real[int] cvec = M*ones; // constraint vector
	real nc = cvec'*cvec;    // and its norm squared

	// epst*int(grad(u)^2)+1/epst*int(u^2*(1-u)^2)
	
   // Define objective function and gradient
	func real J(real[int] &V){
   	real[int] uV = ones-V;
   	real[int] v = V.*uV;
   	real[int] p1 = K*V;
   	real[int] p2 = M*v;
   	real val = epst*(V'*p1)+1/epst*(v'*p2);
   	return val;
	}

    // Gradient of the objective function
	func real[int] GradJ(real[int] &V){
   	u[] = V; //plot(u,fill=1);
   	real[int] ones(V.n);
   	ones = 1;
   	real[int] uV = ones-V;
   	real[int] u2V = ones-2*V;
   	real[int] v = V.*uV;
   	real[int] p1 = K*V;
   	real[int] p2 = M*v;
   	real[int] gradt(V.n);
   	real[int] p3 = p2.*u2V;
   	gradt = 2*epst*p1+2/epst*p3;
  	   gradt = (-(gradt'*cvec)/nc)*cvec+gradt;
   	return gradt;
	}

   real val=1e16; 
   Vh usol;

   for(int i=0;i<nruns;i++){
        // random initialization for the density
        u[] = rand(Vh.ndof);
	    real initvol = int2d(Th)(u);
	    // project Initialization on the integral constraint
    	u  = u-initvol/Th.area+Prop; 

		// minimize the Modica-Mortola functional
		real tval = nloptLBFGS(J,u[],grad=GradJ,nGradStored=15);
		// check if we obtain a better local minimum than before
        if(tval<val){val=tval;usol[]=u[];}
   }
   u[] = usol[];
   

  // Shape derivative evaluation
  Vh0 grh = epst*(dx(u)^2+dy(u)^2)+1/epst*u^2*(1-u)^2;
  
  real[int] gradt(vec.n);
  // Convert to gradient w.r.t. Fourier coefficients
   gradt(0) = int1d(Th,1)(grh*(x*N.x+y*N.y)/sqrt(x^2+y^2));

	for (int i=1;i<=n;i++){
		gradt(i) = int1d(Th,1)(grh*(x*N.x+y*N.y)*
   		cos(i*atan2(y,x))/sqrt(x^2+y^2));
	}
	for (int i=1;i<=n;i++){
		gradt(i+n) = int1d(Th,1)(grh*(x*N.x+y*N.y)*
   	sin(i*atan2(y,x))/sqrt(x^2+y^2));
	}
   
   plot(u,fill=1,cmm="final");
   // save mesh and iteration information (optional)
   if(saving==1){
       savemesh(Th,"CurrentMesh2D.msh");
       ofstream fileout("OnePhase2D.data");
       for(int i=0;i<u[].n;i++){
           fileout << u[][i] << endl;
       }
       Vh U,V;
       problem Interp(U,V) = int2d(Th)(U*V)-int2d(Th)(grh*V);
       Interp;
       ofstream fileout2("ShDeriv2D.data");
       for(int i=0;i<U[].n;i++){
           fileout2 << U[][i] << endl;
       }
   }
//////////////////
  real[int] res = [val,gradt];
  return res;
}
// ==== end of objective function === //

// area and its gradient as a function of
// the Fourier coefficients of the radial function 
func real[int] farea(real[int] VV){
	real[int] v = VV;
	real[int] u = v.*v;
	int k = u.n; 
	real[int] ue = u(1:k-1);
	real arr = 2*pi*(u(0)/2+ue.sum/4);
	real[int] gradt = VV;
	gradt(0) = 2*pi*v(0);
	gradt(1:gradt.n-1) = pi*v(1:v.n-1);
	real[int] result = [arr,gradt];
	return result;
}


// Initialization for the maximization algorithm
real[int] vect;
int st = 1;
if (st==1)
{
vect = [1,        -0.5,
                  0.01,
                  0.05,
                  0.1,
                  0.,
                  0.03,
                  0.03, 
                  0.001,0,0,0.01,0,0.001,-0.000001,0.001,0.0001];//.1*randreal1()];
} 
else {
 vect = [1,0.0,0,0,0];	
}

// Show the initialization
cout << vect << endl;



real[int] far = farea(vect); // compute area and gradient
real arr = far(0);
 // rescale to verify the area constraint
vect = sqrt(areatarget/arr)*vect; 

// initial evaluation of the objective function
real[int] ggg = f(vect);
// store the gradient
real[int] gradt = ggg(1:ggg.n-1); 


// define a vector to store the values of the objective function
real[int] vals;

// index for iterations
int i = 0;


// optimization loop - gradient flow
while(i<niter){
	i=i+1;
	// decrease the step size every 50 iterations
	if(i%50==0){alpha = 0.5*alpha;}
	// advance in the direction of the gradient
	real[int] tvect = vect+alpha*gradt;
	real[int] far = farea(tvect);
	// rescale to have the right area
	tvect = sqrt(areatarget/far(0))*tvect;
    
    // test to see if the new area is correct
	far = farea(tvect);
	real arr = far(0);

    // evaluate the obejctive function
	real[int] ggg = f(tvect);

	real val = ggg(0);
	
    // Display iteration information
	cout << "Iter " << i<<  " F val: " << val << " Area " << arr <<  " alpha " << alpha <<endl;
	
	// get the new gradient information
	real[int] tgradt = ggg(1:ggg.n-1); 
	// store the current value of the objective function
    vals = [vals,val];
    vect   = tvect;
    gradt  = tgradt;
    real[int] dis = 1:vals.n;
    // plot the evolution of the cost function
    plot([dis,vals],cmm="Iteration "+i);
}

// Save the information for the last shape
saving = 1;
real[int] final = f(vect);
cout << "Optimal computed value: " << final(0) << endl; 
cout << "Shape: "<< vect << endl;

// plot the evolution of the objective function
real[int] dis = 1:vals.n;
plot([dis,vals]);

// save information regarding the objective function
{
   ofstream cost("cost.data");
   for(int i=0;i<vals.n;i++){
       cost << vals[i] << endl;
   }
}









